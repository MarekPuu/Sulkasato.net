---
import type { ScheduleItem } from "../../types";
import { formatTimeRange } from "../../utils/formatDate";
// await new Promise((res) => setTimeout(res, 3000));
import { fetchSchedule } from "../../lib/api/schedule";

let schedule: ScheduleItem[] = [];
let fetchingError: string | null = null;

try {
  schedule = await fetchSchedule();
} catch (error) {
  fetchingError =
    "Pelivuorojen lataaminen epäonnistui. Yritä myöhemmin uudelleen.";
  console.error("Error fetching schedule:", error);
}
---

<div class="overflow-x-auto mb-6 shadow-sm">
  <table class="min-w-full bg-white rounded-lg overflow-hidden">
    <thead class="bg-[var(--color-primary)] text-white">
      <tr>
        <th class="py-3 px-4 text-left">Päivä</th>
        <th class="py-3 px-4 text-left">Aika</th>
        <th class="py-3 px-4 text-left">Paikka</th>
        <th class="py-3 px-4 text-left">Kenelle</th>
      </tr>
    </thead>
    <tbody class="divide-y divide-gray-200">
      {
        fetchingError ? (
          <tr>
            <td colspan="4" class="py-4 px-4 text-center text-red-600">
              {fetchingError}
            </td>
          </tr>
        ) : schedule.length === 0 ? (
          <tr>
            <td colspan="4" class="py-4 px-4 text-center text-gray-600 italic">
              Ei pelivuoroja saatavilla.
            </td>
          </tr>
        ) : (
          schedule.map((item, index) => (
            <tr class={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
              <td class="py-3 px-4 font-medium">{item.Day}</td>
              <td class="py-3 px-4">
                {formatTimeRange(item.StartTime, item.EndTime)}
              </td>
              <td class="py-3 px-4">{item.Location}</td>
              <td class="py-3 px-4">{item.ToWhom}</td>
            </tr>
          ))
        )
      }
    </tbody>
  </table>
</div>
